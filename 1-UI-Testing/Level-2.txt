
-----------------------------------------
Rendering lists and detail views
-----------------------------------------

cd test
touch AppointmentsDayView.test.js


    describe('AppointmentsDayView', () => {
        let container;

        beforeEach(() => {
            container = document.createElement('div');
        });

        const render = component =>
            ReactDOM.render(component, container);

        it('renders a div with the right id', () => {
            render(<AppointmentsDayView appointments={[]} />);
            expect(container.querySelector('div#appointmentsDayView')).not.toBeNull();
        });
    });


cd src
touch AppointmentsDayView.js    

    export const AppointmentsDayView = () =>
    <div id="appointmentsDayView"></div>;




AppointmentsDayView.test.js
---------------------------- 


    it('renders multiple appointments in an ol element', () => {
        const today = new Date();
        const appointments = [
            { startsAt: today.setHours(12, 0) },
            { startsAt: today.setHours(13, 0) }
        ];
        render(<AppointmentsDayView appointments={appointments} />);
        expect(container.querySelector('ol')).not.toBeNull();
        expect(
            container.querySelector('ol').children
        ).toHaveLength(2);
    });


AppointmentsDayView.js  
----------------------  

    export const AppointmentsDayView = () => (
    <div id="appointmentsDayView"> 
        <ol />
    </div>
    );

    ---------------

    export const AppointmentsDayView = ({ appointments }) => (
    <div id="appointmentsDayView"> 
        <ol>
        {appointments.map(() => (
            <div />
        ))}
        </ol>
    </div>
    );

    ---------------

    <ol>
    {appointments.map(appointment => (
        <div key={appointment.startsAt} />
    ))}
    </ol>




AppointmentsDayView.test.js
---------------------------- 

    it('renders each appointment in an li', () => {
        const today = new Date();
        const appointments = [
        { startsAt: today.setHours(12, 0) },
        { startsAt: today.setHours(13, 0) }
        ];
        render(<AppointmentsDayView appointments={appointments} />);
        expect(container.querySelectorAll('li')).toHaveLength(2);
        expect(
            container.querySelectorAll('li')[0].textContent
        ).toEqual('12:00');
        expect(
            container.querySelectorAll('li')[1].textContent
        ).toEqual('13:00');
    });



AppointmentsDayView.js  
----------------------  

    <ol>
    {appointments.map(appointment => (
        <li key={appointment.startsAt} />
    ))}
    </ol>

    ---------------

    const appointmentTimeOfDay = startsAt => {
        const [h, m] = new Date(startsAt).toTimeString().split(':');
        return `${h}:${m}`;
    }

    ...
    <ol>
    {appointments.map(appointment => (
        <li key={appointment.startsAt}>
        {appointmentTimeOfDay(appointment.startsAt)}
        </li>
    ))}
    </ol>


----------------------------
Selecting data to view
-----------------------------


AppointmentsDayView.test.js
---------------------------- 

    it('initially shows a message saying there are no appointments today', () => {
        render(<AppointmentsDayView appointments={[]} />);
        expect(container.textContent).toMatch(
            'There are no appointments scheduled for today.'
        );
    });



AppointmentsDayView.js  
----------------------  

    <p>There are no appointments scheduled for today.</p>


AppointmentsDayView.test.js
---------------------------- 

    it('selects the first appointment by default', () => {
        const appointments = [
            {
            startsAt: today.setHours(12, 0),
            customer: { firstName: 'Ashley' }
            },
            {
            startsAt: today.setHours(13, 0),
            customer: { firstName: 'Jordan' }
            }
        ];
        render(<AppointmentsDayView appointments={appointments} />);
        expect(container.textContent).toMatch('Ashley');
    });


AppointmentsDayView.js  
----------------------  

    {appointments.length === 0 ? (
        <p>There are no appointments scheduled for today.</p>
    ) : (
        <Appointment {...appointments[0]} />
    )}


-----------------------------------------
Adding events to a functional component
-----------------------------------------


AppointmentsDayView.test.js
---------------------------- 

    it('has a button element in each li', () => {
        render(<AppointmentsDayView appointments={appointments} />);
        expect(
            container.querySelectorAll('li > button')
        ).toHaveLength(2);
        expect(
            container.querySelectorAll('li > button')[0].type
        ).toEqual('button');
    });


AppointmentsDayView.js  
----------------------  

    <ol>
    {appointments.map(appointment => (
        <li key={appointment.startsAt}>
    <button type="button">
            {appointmentTimeOfDay(appointment.startsAt)}
    </button>
        </li>))}
    </ol>;



AppointmentsDayView.test.js
---------------------------- 

    import ReactTestUtils from 'react-dom/test-utils';

    it('renders another appointment when selected', () => {
        render(<AppointmentsDayView appointments={appointments} />);
        const button = container.querySelectorAll('button')[1];
        ReactTestUtils.Simulate.click(button);
        expect(container.textContent).toMatch('Jordan');
    });


AppointmentsDayView.js
---------------------------- 


    export const AppointmentsDayView = ({ appointments }) => {
        const [selectedAppointment, setSelectedAppointment] = useState(
            0
        );
        return (
            <div id="appointmentsDayView">
                <ol>
                    {appointments.map((appointment,i) => (
                        <li key={appointment.startsAt}>
                            <button type="button" onClick={() => setSelectedAppointment(i)}>
                                {appointmentTimeOfDay(appointment.startsAt)}
                            </button>
                        </li>))}
                </ol>;
            {appointments.length === 0 ? (
                    <p>There are no appointments scheduled for today.</p>
                ) : (
                        <Appointment {...appointments[selectedAppointment]} />
                    )}
            </div>
        )
    };


